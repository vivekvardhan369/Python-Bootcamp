=>  Variable Declaration in Python:
    *In Python, variables are declared by assigning a value to a name using the equal sign (=) operator.
    eg: x = 10
    *Variable names in Python can contain letters, numbers, and underscores.
    *They cannot start with a special characters, spaces and numbers. 
    *Variable names are case-sensitive, meaning x, X, and X_ would be considered different variables. It's also a convention in Python to use lowercase names for variables, with underscores to separate words in multi-word variable names 
    (e.g., my_variable_name).

=>  Conventions for naming variables:
    *In Python, there are conventions for naming variables that help make your code more readable and understandable to others. 
    *Here are some common naming conventions for variables in Python:
        *Use descriptive names:Choose variable names that describe the data they hold or the purpos they serve in your code. 
        *Use lowercase letters:This helps differentiate variables from classes and functions, which typically use CamelCase or snake_case.
        *Use underscores to separate words:This convention is known as snake_case. For example: first_name, total_count, user_id.
        *Avoid single-letter names: it's generally better to use descriptive names that convey the purpose of the variable.
        *Be consistent: Stick to a consistent naming style throughout your codebase. Consistency makes your code easier to read and maintain.
        *Use meaningful names:Choose variable names that are meaningful and descriptive. Avoid generic names like data, temp, or value
                              unless they convey specific meaning in your context.
        *Follow PEP 8:PEP 8 is the official style guide for Python code. It provides guidelines for writing clean, readable code, 
                      including naming conventions. Following PEP 8 helps ensure consistency and readability across Python projects.

=>  Immutable Objects and Uses: 
    *Immutable objects are those whose state cannot be changed after they are created. Once an immutable object is created, its 
     state remains fixed throughout its lifetime.
     Examples : strings, integers, floats, tuples, and frozensets.
     *Use immutable objects when you want to ensure that the state of an object remains unchanged after creation.
=>  Mutable Objects and Uses:
    *Mutable objects, on the other hand, can be modified after they are created. Their state can be changed, and they can grow or shrink 
    in size.
    Examples: lists, dictionaries, sets, and user-defined objects.
    *Mutable objects are useful when you need to modify the state of an object dynamically during program execution.

=>  Homogeneous:
    *In a homogeneous list or array, all elements are of the same data type.
    *This means that every element in the list or array has the same data type, such as integers, floats, strings, or custom objects.

=>  Heterogeneous:
    *In a heterogeneous list or array, elements can be of different data types.
    This means that elements in the list or array can be integers, floats, strings, or any other data type, and they are not required to be of the same type.   

=>  Lists:
    *Lists are fundamental data structures in Python and are widely used for various programming tasks, including data storage, manipulation, and processing. Understanding how to work with lists efficiently is essential for writing effective Python code.

=>  #Adding an element
    my_list=[1,2,3,4,5]
    my_list.append(6)
    print(my_list)  # Output: [1, 2, 3, 4, 5, 6]

=>  #Remove an element
    my_list.remove(4)
    print(my_list)  # Output: [1, 2, 10, 5, 6]

=>  # Modify an element
    my_list[2] = 10
    print(my_list)  # Output: [1, 2, 10, 4, 5]

=>  #pop
    my_list.pop(0)
    print(my_list)  # Output: [2, 10, 4, 5]
